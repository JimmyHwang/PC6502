<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAFS8AMVdmhSJ3lP8hn8z/I6fZ/yCp1v8fqtX/H6rW/x6q1/8gqtb/IKrW/yCq1v8hqNb/IKnW/yCp
        1v8gqdb/IKnW/yCp1/8hqdf/IKnX/x+p1v8fqdX/H6nW/yGp1/8hqdf/IKjZ/yCo1/8gqdb/IZzE/yNq
        gf8qOUC2TSwvB0mdvDAqsNzUFsH4/xPF//8VxP//FMT//xTE//8VxP//E8T//xTF//8Uxf//FcX//xfE
        //8Xw///FsT//xTF//8Uxf//FMX//xbE//8VxP//FcT//xTE//8Txf//FMX//xXE//8VxP//FsT//xXE
        //8Uxf//Gb7z/ySNsNkvWWowK6TRrRnB+P8SxP7/EsT+/xPE/v8Uw///FcL//xbC//8Vw///EsT+/xLE
        /v8Tw///FMP//xbC//8Vwv//E8P//xLE/v8TxP//FMP//xXC//8Wwv//FMP//xPE/v8TxP7/FMP//xTD
        //8Vwv//FcP//xPD//8UxP7/HLvv/zCBnqsfsOD5E8T//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD
        //8Uw///FMP//xTE//8Uw///FMP//xTD//8Uw///FMP//xTE//8UxP//FMT//xTD//8Uw///FMP//xTD
        //8Uw///FMP//xTD//8Uw///FMP//xXD//8Xw///Kpi88xu36P8SxP//FMP//xTD//8Uw///FMP//xTD
        //8Uw///FMP//xTD//8Uwfz/ErXt/xS/+v8Uw///FMP//xTD//8UxP//E7z2/xGq3v8Rqd7/E733/xTD
        //8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///FcP//xfE//8bm8b/Hbfn/xTE//8Uw///FMP//xTD
        //8Uw///FMP//xTD//8Uw///FMT//xO58v8JYX//EJzM/xTF//8Uw///FMT//xKx5/8JYYD/B0Va/wdH
        Xf8MeJ7/E8D8/xTD//8Uw///FMP//xTD//8Uw///FMP//xTD//8Vw/7/F8X//xubx/8cuOb/E8T//xTD
        //8Uw///FMP//xTD//8Uw///FMP//xTD//8UxP//E7jx/whPaP8Pkb3/FMf//xTF//8Uwv7/DHec/whP
        Z/8Rpdf/ErPr/xKt4/8Twfz/E8P//xTE/v8UxP7/FsP//xXD//8Uw///FMP//xXD/v8Wxf//G5vG/xu4
        5f8Sxf//E8P//xTD//8Uw///FMP//xTD//8UxP7/FMT+/xXE//8TuPL/B0dc/wdEWf8LbI3/EaLU/xO+
        +P8JWnX/DH6j/xXF//8VxP//FMT//xPD//8Uw///FcP+/xTE/v8Vw///FcP//xTD//8Uw///FcP+/xbF
        //8am8X/G7fn/xPE//8Uw///FMP//xTD//8Uw///FMP//xTD//8UxP//FMT//xO48f8ITWT/C2mI/wxy
        lf8HRVv/EJ3O/whWcP8OirL/Fcb//xXD//8Uw///FMP//xXE//8Ww///FMP//xTE/v8UxP7/FMP//xTD
        //8Vw///FsT//xqbxf8at+f/FMT//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD//8UxP//E7jw/wlR
        av8PlsH/FcX8/wladv8MfKL/CmKA/wtzlv8Ux///FMb//xTF//8Uw///FcT//xXE/v8Tw/7/E8T+/xTD
        /v8Uw///FMP//xXD//8WxP//GZvF/xm45/8Sxf//FMP//xTD//8Uw///E8P+/xXD/f8Wwv7/E8P9/xPE
        /f8UufD/CEti/wx3m/8Pk77/B0lf/w6Pu/8QlMD/Bj5R/w6Ouv8QodH/EKLU/xTB/f8Uw///FMP+/xPD
        /v8Sw/3/FMT9/xTD//8Uw///FcP//xbE//8Zm8X/Grjm/xLF//8Tw///E8P//xTD//8Uw///FMP//xTD
        //8Uw///FMT//xS+9/8LaYn/BkZc/whVbv8MfKL/E7ny/xTC/P8Nha3/B0ti/wdNZf8MfaP/FMD6/xTD
        //8Uw///FMP//xTD//8Uw///FMP//xTD//8Vw///FsT//xmbxf8ct+f/FMT//w/B/P8Nwfv/EsL+/xTD
        //8Uw///FMP//xTD//8Uw///FMT+/xO/9/8QuvP/Eb30/xTD/f8Uw///FMP//xTE//8Tvff/E7nx/xS/
        +v8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///FMP//xXD/v8WxP//GprG/xy45v8UxP//FsH9/xfC
        +v8Uw/z/FMP//xTD//8Uw///FMP//xTD//8Uw/7/E8P+/xPD//8Sw/3/FMP+/xTD//8Uw///FMP//xTD
        //8UxP//FMP//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///GsL5/xnE+v8am8X/Grjm/xDE
        /v8VxPz/GMH6/xjC/P8YxP7/GcX+/xnF//8Vwv7/E8P+/xTC/v8YxP7/Gsb+/xnF//8WxP7/FcP+/xXD
        //8Vw///GMP//xnE/v8XxP7/FMT+/xXD/v8Yw/7/GcT+/xnE/v8YxP7/GMT+/xTD/v8dv/T/Hsb7/xqb
        xf8btef/DsH8/w/B+v8Pw/v/H8P1/ym23/8ln8T/LLPb/xzC9f8PxPz/FcH5/yy55f8nosH/KKnO/ybC
        7/8Yw/f/GsD7/yTB+P8rqtr/J5vH/yi14v8Xxvb/HMT6/y224f80rtH/MqzT/zGs0v8ssdr/HcDy/xvC
        9P8Zxvj/GZvE/x+36f8Ywvz/F8L5/xDF+/8jtuP/E2J+/wk5Tv8PVGb/IKnP/xbH9/8ct+P/F2aD/wk3
        Sf8MQlf/JJGw/x7B7/8gwvT/KqTL/xJNZ/8MOFb/GGiF/yG74/8ewfL/HHOO/xNEUf8SQlb/ET5T/xNW
        df8hteP/Gcb6/xXG+v8Ym8X/G7bl/xbC/P8Zwfz/G8X8/xuGrf8SQ1n/KYCU/xNLV/8dbIr/JcXt/xiQ
        sP8LNUv/KG+K/xxVav8STGD/I7Xc/yfA6v8eaIP/GUhe/yp4lv8LPE//HZS1/x/A8v8ZaYf/Dyw8/yxY
        cP8jY3n/HnOR/x+55f8Yxfr/GcT7/xmbxf8Ys+X/E8H+/xbC/v8owPP/HF5//yZpiP8+xOr/H3qT/xRN
        Z/8qveX/Go23/x1rkf82uuj/LJ68/ws/Uf8eoMf/LLfh/xVGXv8me5r/Pbzl/xhSa/8ecI7/IsH2/ySl
        0f8WTGj/NXCO/zu54P8rv+7/GsX0/xrF+f8dxv7/GZvF/xyz5v8Twf//FcP//ym46f8YS2n/KHaX/zHF
        7/8dgqD/Ekdi/yi25v8kuvL/LLXo/x3B9f8crNP/CUBY/xqVv/8prdr/Dj1V/x+Osf8yw/P/H2J//x5g
        ef8gv/H/HMT3/yOPs/8MPVb/Houw/yC/+P8Zwvn/HMT3/xfF+/8amsb/HLTn/xLB//8Vw///JrXn/xJF
        Yf8jYHz/RL7b/yN0iP8UT2r/Jbjs/xix6P8jmcb/McDq/yWiw/8IPVb/Hp3H/ySm1v8LPlb/HJa3/zDD
        8/8jaof/Gldu/x+97P8Wxv3/JsHu/xxsh/8NR1//JarX/yLG+/8gxPr/F8T8/xqbxf8Ztuj/EcL//xXD
        //8mtej/FEdj/xM+Vf8gaHv/DkBM/x1zjP8jwvT/FJrD/wo/W/8lepL/HGNz/wpCW/8ir93/IqXV/wo+
        Vf8ZmLj/LMLy/yJqh/8WUWv/Irzt/xXC/f8Vwvr/JajR/xFDV/8ee5f/I8Tz/yDD9/8ZxPr/GpvF/xm2
        6P8Sw/7/FcP+/ye16P8aUGz/J2B5/xhPaP8XYnP/K7LR/yLG9/8Umb//EDlP/xVCVP8HNkn/HHme/yS/
        9v8gqNT/CT5T/xmXt/8pxPL/IWmH/xVQcP8iu+//F8L6/xTB9/8mwe//JGqC/xdQaf8kuen/IMb4/x3G
        +v8Zm8X/Grbn/xPD/v8Uwvz/Jrjt/xtac/8teI3/OrPX/zCxz/8quNz/IMP3/xWYwv8aT2j/Npi8/yCf
        xf8mvOn/HMT9/yCv3P8LQlr/GYut/yzB7v8eYHz/GVx7/yW68P8Xkr7/HJW8/yvE8v8pg6D/FkRY/yex
        3P8cxvr/Gsb9/xmbxf8dtef/FMP9/xTC+/8jwff/G3SO/x5gb/89v93/Iomg/xBwjf8gv/T/HJ7N/xhP
        aP9Cp8r/NLje/ym74/8axPn/Hrjo/w9Oaf8fdo3/PLTW/xlOY/8cdpT/J8D0/xVxlf8cW3X/Qbba/ypx
        iP8VRVb/LLbd/xbE+/8Uw///GJvF/xy15/8Sw/3/FcH7/xfB+v8cnb3/C0VU/xxkdv8PQU7/G3WP/yTF
        +P8epNX/DDtP/xhGVv8TRl//E2mL/xu67v8cwvf/GXmY/xBHVf8jZ3n/DDlQ/x2Xwf8hyPz/H5vC/w4+
        V/8dV27/DjdG/xhlfv8owe3/FsT9/xXE//8Zm8X/GLfm/w7E/f8Vwv3/E8L9/xu/7P8agJ3/E0hd/xlg
        fv8hsN7/Gsf+/xmu4/8UZYD/GVNo/xtObf8YbZT/H7jw/xjE/v8jstv/GmJ5/xVFWv8cdZz/Hrjy/xHC
        /v8fvu//H3qc/xNEXP8TWG3/GqXL/xbC+f8Uw/7/F8X//xqaxv8dt+X/EsT+/xPC//8Tw///FMT9/xq+
        9P8YseT/Grnu/xfD/v8Tw///FcD7/xm57v8dt+v/Hrft/xq58f8Xwf3/FMP//xnE/P8ct+z/Gq/j/xu9
        9v8Vwv7/EsL//xbE/v8dvvX/GbHm/xm26v8Xwvv/E8L+/xTD//8Wxf//HpvF/yWz3vkUw/7/FML//xXE
        //8TxP//E8P//xLF//8Sxf//FMP//xTD//8Uw///FMT//xPE//8TxP//FMT//xTD//8Uw///FMP//xTE
        //8UxP//FMP//xTD//8Uw///FMP//xTD//8UxP//FMT//xTD//8Uw///FMP//xbE/v8rmrzzLqjPsRnA
        +f8Sw///E8X//xPE//8Uw///E8T+/xLE/v8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD
        //8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD//8Uw///FMP//xTD//8TxP//G73x/y2E
        oKs/l7I1J7XiyRfE/P4Tx///FMT//xTE//8Txf//FMT//xTE//8UxP//FMT//xTE//8UxP//FMT//xTE
        //8UxP//FMT//xTE//8UxP//FcT//xTE//8UxP//FMT//xTE//8UxP//FMT//xTE//8UxP//FMX//xq+
        9/8nlbjSL1poMEa12QBImbU1K42u5h+j0P8frdz/IKzb/x6u2f8fr9n/IK3d/yGs3/8gq+D/Iavf/x2t
        3f8frdz/Hq3d/x2s3f8crN7/H6zc/x+u3f8gq97/IKzb/x+t2/8grdz/Ia3e/yKs3v8erNv/IKzd/yGr
        3f8fn83/IXKO+i5RX1kjbocAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAE=
</value>
  </data>
</root>